class Solution {
    
     static int coinChange(int[] arr, int T) {
        int n = arr.length;
        int prev[] = new int[T + 1];
        int cur[] = new int[T + 1];

        for (int i = 0; i <= T; i++) {
            if (i % arr[0] == 0)
                prev[i] = i / arr[0];
            else
                prev[i] = (int) Math.pow(10, 9);
        }

        for (int ind = 1; ind < n; ind++) {
            for (int target = 0; target <= T; target++) {
                int notTake = prev[target];
                int take = (int) Math.pow(10, 9);

                if (arr[ind] <= target)
                    take = 1 + cur[target - arr[ind]];

                cur[target] = Math.min(notTake, take);
            }

            prev = cur.clone();
        }

        int ans = prev[T];
        return ans >= (int) Math.pow(10, 9) ? -1 : ans;
    }


    /*
    //Tabulation
    
    public int coinChange(int[] coins, int amount) {
        int n = coins.length;
        int[][] dp = new int[n][amount + 1];

        for (int i = 0; i <= amount; i++) {
            if (i % coins[0] == 0) {
                dp[0][i] = i / coins[0];
            } else {
                dp[0][i] = Integer.MAX_VALUE;
            }
        }

        for (int i = 1; i < n; i++) {
            for (int j = 0; j <= amount; j++) {
                int notTake = dp[i - 1][j];
                int take = Integer.MAX_VALUE;
                if (coins[i] <= j) {
                    int res = dp[i][j - coins[i]];
                    if (res != Integer.MAX_VALUE) {
                        take = 1 + res;
                    }
                }
                dp[i][j] = Math.min(take, notTake);
            }
        }

        return dp[n - 1][amount] >= Integer.MAX_VALUE ? -1 : dp[n - 1][amount];
    }

    */
   
    /*
    //Memoization
    public int coinChange(int[] coins, int amount) {
        int n=coins.length;
        int [][] dp = new int[n][amount+1];
        for(int [] row : dp){
            Arrays.fill(row,-1);
        }
        int ans = f(coins.length - 1, amount, coins,dp);
        return ans >= Integer.MAX_VALUE ? -1 : ans;
    }

    public int f(int index, int T, int[] coins,int [][] dp) {
        if (index == 0) {
            if (T % coins[0] == 0) {
                return T / coins[0];
            } else {
                return Integer.MAX_VALUE;
            }
        }

        if(dp[index][T]!=-1){
            return dp[index][T];
        }
        int notTake = f(index - 1, T, coins,dp);
        int take = Integer.MAX_VALUE;
        if (coins[index] <= T) {
            int res = f(index, T - coins[index], coins,dp);
            if (res != Integer.MAX_VALUE) {
                take = 1 + res;
            }
        }
        dp[index][T] = Math.min(take, notTake);;
        return dp[index][T];
    }
    */
}
