
class Solution {
    private void markParent(TreeNode root, Map<TreeNode,TreeNode> parent){
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(root);
        while(!q.isEmpty()){
            TreeNode curr = q.poll();
            if(curr.left!=null){
                parent.put(curr.left,curr);
                q.offer(curr.left);
            }
            if(curr.right!=null){
                parent.put(curr.right,curr);
                q.offer(curr.right);
            }
        }
    }

    
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode> parent = new HashMap<>();
        markParent(root,parent);
        Map<TreeNode,Boolean> vis = new HashMap<>();
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        q.add(target);
        vis.put(target,true);
        int dis=0;
        while(!q.isEmpty()){
            int size=q.size();
            if(dis==k) break;
            dis++;
            for(int i=0; i<size; i++){
                TreeNode curr= q.poll();
                if(curr.left!=null && vis.get(curr.left)==null){
                    q.add(curr.left);
                    vis.put(curr.left,true);
                }
                if(curr.right!=null && vis.get(curr.right)==null){
                    q.add(curr.right);
                    vis.put(curr.right,true);
                }
                if(parent.get(curr)!=null && vis.get(parent.get(curr))==null){
                    q.add(parent.get(curr));
                    vis.put(parent.get(curr),true);
                }
            }
        }
        List<Integer> res= new ArrayList<>();
        while(!q.isEmpty()){
            TreeNode curr=q.poll();
            res.add(curr.val);
        }
        return res;    
    }

}
