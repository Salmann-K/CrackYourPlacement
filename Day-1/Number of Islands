class Solution {
    int [] delrow={-1,1,0,0};
    int [] delcol={0,0,-1,1};
    public int numIslands(char[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        boolean [][] vis = new boolean[n][m];
        int count =0;
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j]=='1' && !vis[i][j]){
                    dfs(grid,i,j,vis,n,m);
                    count++;
                }
            }
        }
        return count;
    }

    public void dfs(char[][] grid,int r,int c,boolean [][] vis,int n,int m){
        vis[r][c] = true;
        for(int i=0; i<4; i++){
            int newRow=r+delrow[i];
            int newCol=c+delcol[i];

            if(newRow>=0 && newRow<n && newCol>=0 && newCol<m && grid[newRow][newCol]=='1' && !vis[newRow][newCol]){
                dfs(grid,newRow,newCol,vis,n,m);
            }
        }
    }
}
