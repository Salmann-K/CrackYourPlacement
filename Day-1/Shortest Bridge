class Solution {
    public class Pair {
    private int first;
    private int second;

    public Pair(int first, int second) {
        this.first = first;
        this.second = second;
    }
    }

    int [] delrow={-1,1,0,0};
    int [] delcol={0,0,-1,1};

    public int shortestBridge(int[][] grid) {
        int n=grid.length;
        Queue<Pair> q = new LinkedList<>();
        boolean [][] vis = new boolean[n][n];
        int flag=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j]==1){
                    dfs(grid,i,j,q,vis);
                    flag=1;
                    break;
                }
            }
            if(flag==1){
                break;
            }
        }

        int step=0;
        
        while(!q.isEmpty()){
            int size=q.size();
            for(int i=0; i<size; i++){
                Pair curr=q.poll();
                for(int j=0; j<4; j++){
                    int nr = delrow[j] + curr.first;
                    int nc= delcol[j] + curr.second;
                    if(nr>=0 && nr<n && nc>=0 && nc<n && !vis[nr][nc]){
                        if(grid[nr][nc]==1){
                            return step;
                        }
                        q.add(new Pair(nr,nc));
                        vis[nr][nc]=true;
                    }
                }
            }
            step++;
        }
        return -1;
        
    }

    public void dfs(int[][] grid,int r,int c,Queue<Pair> q,boolean [][] vis){
        vis[r][c]=true;
        q.add(new Pair(r,c));
        for(int i=0; i<4; i++){
            int nr=delrow[i] + r;
            int nc=delcol[i] + c;

            if(nr>=0 && nr<grid.length && nc>=0 && nc<grid.length && !vis[nr][nc] && grid[nr][nc]==1){
                dfs(grid,nr,nc,q,vis);
            }
        }     
    }
}
