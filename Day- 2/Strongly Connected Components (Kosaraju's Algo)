class Solution
{
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        Stack<Integer> st = new Stack<>();
        boolean [] vis = new boolean[V];
        for(int i=0; i<V; i++){
            if(!vis[i]){
                dfs(adj,i,vis,st);
            }
        }
        
        ArrayList<ArrayList<Integer>> rev = new ArrayList<>();
        for(int i=0; i<V; i++){
            rev.add(new ArrayList<>());
        }
        
        for(int i=0; i<adj.size(); i++){
        
            for(int j=0; j<adj.get(i).size(); j++){
                int u =adj.get(i).get(j);
                rev.get(u).add(i);
            }
        }
        
        Arrays.fill(vis, false);
        int count=0;
        while(!st.isEmpty()){
            int curr = st.pop();
            if(!vis[curr]){
                count++;
                dfsCount(rev,curr,vis);
            }
        }
        return count;
    }
    
    public void dfs(ArrayList<ArrayList<Integer>> adj,int curr,boolean [] vis,Stack<Integer> st){
        vis[curr]=true;
        for(int i=0; i<adj.get(curr).size(); i++){
            int neigh=adj.get(curr).get(i);
            if(!vis[neigh]){
                dfs(adj,neigh,vis,st);
            }
        }
        st.push(curr);
    }
    
    public void dfsCount(ArrayList<ArrayList<Integer>> rev,int curr,boolean [] vis){
        vis[curr]=true;
        for(int i=0; i<rev.get(curr).size(); i++){
            int neigh=rev.get(curr).get(i);
            if(!vis[neigh]){
                dfsCount(rev,neigh,vis);
            }
        }
    }
}
