class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1) return -1;
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0; i<n; i++){
            adj.add(new ArrayList<Integer>());
        }

        for(int i=0; i<connections.length; i++){
            adj.get(connections[i][0]).add(connections[i][1]);
            adj.get(connections[i][1]).add(connections[i][0]);
        }
        int count=0;

        boolean [] vis = new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                dfs(adj,vis,i);
                count++;
            }
        }
        return count-1;
    }

    public void dfs(ArrayList<ArrayList<Integer>> adj,boolean [] vis,int curr){
        vis[curr]=true;
        for(int i=0; i<adj.get(curr).size(); i++){
            int neigh=adj.get(curr).get(i);
            if(!vis[neigh]){
                dfs(adj,vis,neigh);
            }
        }
    }
}
