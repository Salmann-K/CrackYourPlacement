class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n=graph.length;
        boolean [] vis = new boolean[n];
        boolean [] pathvis = new boolean[n];
        boolean [] check = new boolean[n];
        for(int i=0; i<n; i++){
            if(!vis[i]){
                dfs(graph,i,vis,pathvis,check);
            }
        }

        ArrayList<Integer> ans = new ArrayList<>();
        for(int i=0; i<n; i++){
            if(check[i]){
                ans.add(i);
            }
        }
        return ans;
    }

    public boolean dfs(int[][] graph,int curr,boolean [] vis,boolean [] pathvis,boolean [] check){
        vis[curr]=true;
        pathvis[curr]=true;
        check[curr]=false;
        for(int i=0; i<graph[curr].length; i++){
            int neigh=graph[curr][i];
            if(!vis[neigh]){
                if(dfs(graph,neigh,vis,pathvis,check)){
                    return true;
                }
            }if(pathvis[neigh] || !check[neigh]){
                return true;
            }
        }
        check[curr]=true;
        pathvis[curr]=false;
        return false;
    }
}
