class Solution {
    int[][] dp;
    int n;
    int MOD = (int) 1e9 + 7;
    int[][] jumps = {
        {4, 6},
        {6, 8},
        {7, 9},
        {4, 8},
        {3, 9, 0},
        {},
        {1, 7, 0},
        {2, 6},
        {1, 3},
        {2, 4}
    };
    
    public int f(int remain, int square) {
        if (remain == 0) {
            return 1;
        }
        
        if (dp[remain][square] != 0) {
            return dp[remain][square];
        }
        
        int ans = 0;
        for (int nextSquare : jumps[square]) {
            ans = (ans + f(remain - 1, nextSquare)) % MOD;
        }
        
        dp[remain][square] = ans;
        return dp[remain][square];
    }
    
    public int knightDialer(int n) {
        this.n = n;
        dp = new int[n + 1][10];
        int ans = 0;
        for (int square = 0; square < 10; square++) {
            ans = (ans + f(n - 1, square)) % MOD;
        }
        
        return ans;
    }
}


/*
class Solution {
    int mod = 1000000007;
    int[] dr = {2, 2, -2, -2, 1, 1, -1, -1};
    int[] dc = {1, -1, 1, -1, 2, -2, 2, -2};
    
    public int knightDialer(int n) {
        int ans = 0;
        int [][] dp = new int[4[4]]
        for (int i = 0; i <= 3; i++) {
            for (int j = 0; j <= 2; j++) {
                if (i == 3 && (j == 0 || j == 2)) continue;
                ans = (ans + f(i, j, n)) % mod;
            }
        }
        return ans;
    }

    public int f(int r, int c, int n) {
        if (n == 1) return 1;
        
        int ways = 0;
        for (int i = 0; i < 8; i++) {
            int nr = r + dr[i];
            int nc = c + dc[i];
            if (nr >= 0 && nr <= 3 && nc >= 0 && nc <= 2 && !(nr == 3 && (nc == 0 || nc == 2))) {
                ways = (ways + f(nr, nc, n - 1)) % mod;
            }
        }
        return ways;
    }
}
*/
