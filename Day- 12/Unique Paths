class Solution {
    public int uniquePaths(int m, int n) {
       int [] prev = new int[n];
       for(int i=0; i<m; i++){
            int [] temp = new int[n];
           for(int j=0; j<n; j++){
               if(i==0 && j==0) temp[j]=1;
               else{
                    temp[j]=prev[j];
                    if(j>0){
                        temp[j]=temp[j-1]+prev[j];    
                    }
               }
           }
            prev=temp;
       }
        return prev[n-1];
    }

/*
// For Memoization
    public int unique(int [][] dp , int i, int j){
        if(i==0 && j==0){
            return 1;
        }
        if(i<0 || j<0){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        int up=unique(dp,i-1,j);
        int left=unique(dp,i,j-1);
        dp[i][j] = up+left;

        return dp[i][j];
    }

//For tabulation

 public int uniquePaths(int m, int n) {
       int [][] dp = new int[m][n];
       for(int i=0; i<m; i++){
           for(int j=0; j<n; j++){
               if(i==0 && j==0) dp[0][0]=1;
               else{
                   int up=0;
                   int left=0;
                    if(i>0){
                        up=dp[i-1][j];
                    }
                    if(j>0){
                        left=dp[i][j-1];
                    }
                    dp[i][j]=left+up;
               }
           }
       }
        return dp[m-1][n-1];
    }

*/
}
