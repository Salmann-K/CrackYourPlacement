class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[] prev = new int[n];
        
        for (int i = 0; i < m; i++) {
            int [] temp = new int[n];
            for (int j = 0; j < n; j++) {
                if (i == 0 && j == 0) {
                    temp[j] = grid[i][j];
                } else {
                    int up = (i > 0) ? prev[j] : Integer.MAX_VALUE;
                    int left = (j > 0) ? temp[j - 1] : Integer.MAX_VALUE;
                    temp[j] = grid[i][j] + Math.min(up, left);
                }
            }
            prev=temp;
            
        }
        
        return prev[n-1];
    }
}

/*
Recursive

public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        int ans=minSum(m-1,n-1,grid);
        return ans;
    }

    public int minSum(int i, int j, int [][] grid){
        if(i==0 && j==0){
            return grid[i][j];
        }
        if(i<0 || j<0){
            return Integer.MAX_VALUE;
        }

        int up=minSum(i-1,j,grid);
        int left=minSum(i,j-1,grid);
        return grid[i][j] + Math.min(up,left);
*/

/*
    //Memoization
     public int minSum(int i, int j, int [][] grid ,int [][] dp){
        if(i==0 && j==0){
            return grid[i][j];
        }
        if(i<0 || j<0){
            return Integer.MAX_VALUE;
        }
        if(dp[i][j]!=-1) return dp[i][j];

        int up=minSum(i-1,j,grid,dp);
        int left=minSum(i,j-1,grid,dp);
        dp[i][j]=grid[i][j] + Math.min(up,left);
        return dp[i][j];
    }
*/
