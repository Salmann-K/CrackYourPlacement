class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int [] indeg = new int[V];
        calcIndeg(adj,indeg,V);
        Queue<Integer> q = new LinkedList<>();
        for(int i=0; i<V; i++){
            if(indeg[i]==0){
                q.add(i);
            }
        }
        
        int i=0;
        int [] topSort = new int[V];
        while(!q.isEmpty()){
            int curr=q.poll();
            topSort[i++]=curr;
            for(int j=0; j<adj.get(curr).size(); j++){
                int neigh=adj.get(curr).get(j);
                indeg[neigh]--;
                if(indeg[neigh]==0){
                    q.add(neigh);
                }
            }
        }
        return topSort;
    }
    
    public static void calcIndeg(ArrayList<ArrayList<Integer>> adj,int [] indeg,int V){
        for(int i=0; i<V; i++){
            for(int j=0; j<adj.get(i).size(); j++){
                int neigh = adj.get(i).get(j);
                indeg[neigh]++;
            }
        }
    }
}
