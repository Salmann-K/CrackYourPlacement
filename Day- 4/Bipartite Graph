class Solution
{
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int [] vis = new int[V];
        for(int i=0; i<V; i++){
            vis[i]=-1;
        }
        
        for(int i=0; i<V; i++){
            if(vis[i]==-1 && !isBp(adj,vis,i)){
                return false;
            }
        }
        return true;
    }
    
    public boolean isBp(ArrayList<ArrayList<Integer>>adj,int [] vis,int S){
        Queue<Integer> q = new LinkedList<>();
        vis[S]=0;
        q.add(S);
        
        while(!q.isEmpty()){
            int curr = q.poll();
            for(int i=0; i<adj.get(curr).size(); i++){
                int neigh = adj.get(curr).get(i);
                if(vis[neigh]==-1){
                    vis[neigh]=1-vis[curr];
                    q.add(neigh);
                }else if(vis[curr]==vis[neigh]){
                    return false;
                }
            }
        }
        return true;
    }
}
