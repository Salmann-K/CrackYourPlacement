class Solution {
    static class Pair implements Comparable<Pair>{
        int v;
        int cost;
        public Pair(int v, int cost){
            this.v=v;
            this.cost=cost;
        }
        
        @Override
        public int compareTo(Pair p2){
            return this.cost-p2.cost;
        }
    }
    
   static int spanningTree(int V, int E, List<List<int[]>> adj) {
        boolean[] vis = new boolean[V];
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(0, 0));
        int finalCost = 0;

        while (!pq.isEmpty()) {
            Pair curr = pq.poll();
            if (!vis[curr.v]) {
                vis[curr.v] = true;
                finalCost += curr.cost;

                for (int[] neighbor : adj.get(curr.v)) {
                    int nextVertex = neighbor[0];
                    int edgeCost = neighbor[1];
                    if (!vis[nextVertex]) {
                        pq.add(new Pair(nextVertex, edgeCost));
                    }
                }
            }
        }
        return finalCost;
    }
}
