static class DQueNode {
    int value;
    DQueNode next;
    DQueNode prev;
}

// Implementation of deque class
static class deque {

    private DQueNode head;
    private DQueNode tail;

    public deque() { head = tail = null; }

    boolean isEmpty() {
        return head == null;
    }

    int size() {
        if (!isEmpty()) {
            DQueNode temp = head;
            int len = 0;
            while (temp != null) {
                len++;
                temp = temp.next;
            }
            return len;
        }
        return 0;
    }

    void insert_first(int element) {
        DQueNode temp = new DQueNode();
        temp.value = element;

        if (head == null) {
            head = tail = temp;
            temp.next = temp.prev = null;
        } else {
            head.prev = temp;
            temp.next = head;
            temp.prev = null;
            head = temp;
        }
    }

    void insert_last(int element) {
        DQueNode temp = new DQueNode();
        temp.value = element;

        if (head == null) {
            head = tail = temp;
            temp.next = temp.prev = null;
        } else {
            tail.next = temp;
            temp.next = null;
            temp.prev = tail;
            tail = temp;
        }
    }

    public void remove_first() {
        if (!isEmpty()) {
            if (head == tail) {
                head = tail = null;
                return;
            } else {
                head = head.next;
                head.prev = null;
            }
        } else {
            System.out.println("List is Empty");
        }
    }

    void remove_last() {
        if (!isEmpty()) {
            DQueNode temp = tail;
            tail = tail.prev;
            if (tail != null) {
                tail.next = null;
            }
            return;
        }
        System.out.print("List is Empty");
    }
}
