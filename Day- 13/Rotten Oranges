
class Solution
{
    private static final int[] delRow = {1, -1, 0, 0};
    private static final int[] delCol = {0, 0, -1, 1};

    static class Pair {
        int r;
        int c;
        int t;

        public Pair(int a, int b, int d) {
            r = a;
            c = b;
            t = d;
        }
    }

    public int orangesRotting(int[][] grid) {
        Queue<Pair> q = new LinkedList<>();
        int n = grid.length;
        int m = grid[0].length;
        int countFresh = 0;
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.add(new Pair(i, j, 0));
                } else if (grid[i][j] == 1) {
                    countFresh++;
                }
            }
        }
        
        int minutes = 0;
        while (!q.isEmpty()) {
            Pair curr = q.poll();
            for (int i = 0; i < 4; i++) {
                int x = curr.r + delRow[i];
                int y = curr.c + delCol[i];
                if (x >= 0 && x < n && y >= 0 && y < m && grid[x][y] == 1) {
                    q.add(new Pair(x, y, curr.t + 1));
                    grid[x][y] = 2;
                    countFresh--;
                }
            }
            minutes = curr.t;
        }

        return countFresh == 0 ? minutes : -1;
    }
}
